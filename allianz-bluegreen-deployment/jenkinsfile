pipeline {
    agent any
    environment {
        IMAGE_TAG = "shahebaz/nodejs-app:latest"
        K8S_NAMESPACE = 'allianz-blue-green'
        DEPLOYMENT_NAME = 'nodejs-app'
        BUILD_CONTEXT = 'allianz-bluegreen-deployment/nodejs-app'
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/shahebazsayed/allianz_k8_bule-green-cluster.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(IMAGE_TAG, "-f ${BUILD_CONTEXT}/Dockerfile ${BUILD_CONTEXT}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push ${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy Blue and Green Deployments') {
            steps {
                script {
                    sh """
                    kubectl -n ${K8S_NAMESPACE} apply -f allianz-bluegreen-deployment/nodejs-app/k8s/deployment-blue.yaml
                    kubectl -n ${K8S_NAMESPACE} apply -f allianz-bluegreen-deployment/nodejs-app/k8s/deployment-green.yaml
                    kubectl -n ${K8S_NAMESPACE} rollout restart deployment/${DEPLOYMENT_NAME}-blue
                    kubectl -n ${K8S_NAMESPACE} rollout restart deployment/${DEPLOYMENT_NAME}-green
                    """
                }
            }
        }

        stage('Wait for Deployments Ready') {
            steps {
                script {
                    sh "kubectl -n ${K8S_NAMESPACE} rollout status deployment/${DEPLOYMENT_NAME}-blue"
                    sh "kubectl -n ${K8S_NAMESPACE} rollout status deployment/${DEPLOYMENT_NAME}-green"
                }
            }
        }

        stage('Deploy Common Service') {
            steps {
                script {
                    sh "kubectl -n ${K8S_NAMESPACE} apply -f allianz-bluegreen-deployment/nodejs-app/k8s/service.yaml"
                }
            }
        }

        stage('Deploy Istio Configurations') {
            steps {
                script {
                    sh """
                    kubectl -n ${K8S_NAMESPACE} apply -f allianz-bluegreen-deployment/nodejs-app/k8s/gateway.yaml
                    kubectl -n ${K8S_NAMESPACE} apply -f allianz-bluegreen-deployment/nodejs-app/k8s/destinationrule.yaml
                    kubectl -n ${K8S_NAMESPACE} apply -f allianz-bluegreen-deployment/nodejs-app/k8s/virtualservice.yaml
                    """
                }
            }
        }

        stage('Optional Clean Up Blue (After full Green switch)') {
            when {
                expression { return false } // <-- by default don't clean up automatically
            }
            steps {
                script {
                    sh """
                    kubectl -n ${K8S_NAMESPACE} delete deployment ${DEPLOYMENT_NAME}-blue || true
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed! Check the Jenkins logs."
        }
    }
}
